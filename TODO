In vague order:

- Add complex pattern matching (match), get rid of let-tuple and case

- Switch from let-style to defn-style for global definitions

- Add significant whitespace to parser.

- Add type variables, polymorphic functions (half-mlton)

- Write lots of unit tests- core language is basically in place.

- Add support for large (> 32 elems) tuples.

- Add support for strings

- Add structures

- Add support for segmented (infinite) stacks.

- Add modules

- Add ml-style module-level functors

- Add type classes

- Add deferreds, remove non-monad mutation.

- Add GC (stop-the-word generational copying)

- Add builtins (calling into native code)

- Add operator definitions, precedence handling, get rid of builtin operators

- Add pattern matching on operators

- Add rank-2 polymorphism

- Add repl

- Add STM

- Add lazy -- add let rec for lazy values.

- contracts

- GADTs?

- Write stdlib

- Best GC (parallel & concurrent generational copying)

- Optimization: use aggregates for functions returning tuples?

- Optimization: Specialization?

- Optimization: Inlining/Loop conversion?

- Optimization: Constant propagation/dead code elimination?
                Do this before lambda lifting, so lambda expressions
                can be constant-propagated.

- Optimization: Pass the bound variables of a lifted lambda expression
                in as a tuple, rather than 1 by 1 (limits argument 
                number expansion)

- Optimization: Combine multiple allocs.  Consider doing let-flattening,
                so that:
                    let x =
                        let y = expr1 in
                        expr2
                    in
                    expr3
                becomes:
                    let y = expr1 in
                    let x = expr2 in
                    let _ = kill y in
                    expr3
                or even:
                    let y = expr1
                    and x = expr2
                    and _ = kill y
                    in
                    expr3

- CloudMagus (see CloudHaskell)
